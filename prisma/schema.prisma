generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id  String @id  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId String @unique
  email String @unique
  firstname String? @unique
  lastname String? @unique
  createdAt DateTime @default(now())
  subscription Subscription?
  automations Automation[]
  integrations Integrations[]

   
}


model Subscription{
  id  String @id  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  plan SUBSCRIPTION_PLAN @default(FREE)
  customerId String?  @unique
}

model Automation{
  id String @id  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active Boolean @default(false)
  name String @default("Untitled")
  createdAt DateTime @default(now())
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?  @db.Uuid 
  trigger Trigger[]
  keywords Keyword[]
  dms Dms[]
  listener Listener?
  posts Post[]
}


model Integrations{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  name INTEGRATIONS @default(INSTAGRAM)
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid
  expiresAt DateTime?
  instagramId String? @unique
  token String @unique

}

model Dms{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automation? @relation(fields: [automationId],references: [id])
  automationId String? @db.Uuid
  createdAt DateTime @default(now())
  sender String?
  receiver String?
  message String?
}


model Post{
  id String @id @default(dbgenerated("gen_random_uuid()"))
  postid String
  caption String?
  media String
  mediaType MEDIATYPE @default(IMAGE)
  Automation Automation? @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId String? @db.Uuid
}

model Listener{
  id String @id @default(dbgenerated("gen_random_uuid()"))
  Automation Automation @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId String @db.Uuid @unique
  listener     LISTENERS  @default(MESSAGE)
  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)
}

model Trigger{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String
  Automation Automation? @relation(fields: [automationId],references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

model Keyword{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word String
  Automation Automation? @relation(fields: [automationId],references: [id], onDelete: Cascade)
  automationId String? @db.Uuid

  @@unique([automationId,word])
}


enum SUBSCRIPTION_PLAN{
  PRO 
  FREE
}

enum INTEGRATIONS{
  INSTAGRAM
}

enum MEDIATYPE{
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS{
  SMARTAI
  MESSAGE
}

